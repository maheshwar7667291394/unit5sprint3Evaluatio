When two thread have two synchronized method and one synchronized method  of each thread waiting for  another 
synchronized method of each thread then there will deadlock occure. and when dead lock occure then program  wait for
infinite time and can't be terminated. 

->The only synchronized keyword is reason for deadlock. so by the removing one  synchronized keyword of any method 
 we can remove the dead lock.

 eg-> public class A {
	
	public synchronized  void funA(B b) {
		System.out.println("inside funA of A");
		b.fun2();
		System.out.println("out side of funA of A");
	}
	 
   public synchronized void fun1() {
	   System.out.println("inside of fun1 of A");
   }

}

public class B {
	
	public synchronized  void funB(A a) {
		System.out.println("inside funB of B");
		a.fun1();
		System.out.println("out side of funB of B");
	}
	 
   public synchronized void fun2() {
	   System.out.println("inside of fun2 of B");
   }

}


public class ThreadA extends Thread {
	A a;
	B b;
	
	public ThreadA(A a, B b) {
		super();
		this.a = a;
		this.b = b;
	}
	
	@Override
	public void run() {
		a.funA(b);
	}
	

}


public class ThreadB extends Thread{

	
	A a;
	B b;
	
	public ThreadB(A a, B b) {
		super();
		this.a = a;
		this.b = b;
	}
	
	@Override
	public void run() {
		b.funB(a);
	}
	
}

public class Main {
	
	public static void main(String[] args) {
		
		A a=new A();
		B b=new B();
		
		ThreadA t1=new ThreadA(a, b);
		ThreadB t2=new ThreadB(a, b);
		t1.start();
		t2.start();
	}

}

